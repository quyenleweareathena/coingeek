const fs = require('fs-extra'),
    log = require('./log'),
    glob = require('glob'),
    os = require('os'),
    config = require('../../gulp-configuration'),
    upath = require('upath'),
    notifier = require('node-notifier'),
    rls = require('remove-leading-slash');

module.exports = {
    generate : function () {
        var success = true;
        var gitIgnoreRules = '';
        var source = upath.join('./', 'gulp-includes', '.gitignore');
        if (config.extension_mode) {
            var manifests = glob.sync(rls(upath.join(rls(config.generateHtml.output), 'manifest.*.json')));
            manifests.forEach(function (file) {
                var browser = upath.basename(file, '.json').replace('manifest.', '') + '-extension/';
                gitIgnoreRules += browser + os.EOL;
            });
        }
        if (config.generateHtml.enable) {
            if (config.generateHtml.enable_index) {
                gitIgnoreRules += rls(upath.join(rls(config.generateHtml.output), 'index.html')) + os.EOL;
                gitIgnoreRules += rls(upath.join(rls(config.generateHtml.output), 'gulp-documentation', '**', '*.html')) + os.EOL;
            }
            var htmlFiles = glob.sync(rls(upath.join(rls(config.generateHtml.src), '**', '*.twig')), {
                ignore : [
                    "**/_*.twig"
                ]
            });
            htmlFiles.forEach(function (file) {
                var destination = rls(upath.join(rls(config.generateHtml.output), upath.basename(file, '.twig') + '.html'));
                var fileContent = fs.readFileSync(file, 'utf8');
                var regex = new RegExp("\\{%\\s*set\\s*output_path\\s*=\\s*['\"]?(.+?)['\"]?\\s*%\\}", 'gmiu');
                var matches = regex.exec(fileContent);
                if (matches !== null) {
                    destination = rls(upath.join(upath.dirname(destination), rls(matches[1])));
                }
                gitIgnoreRules += destination + os.EOL;
            });
        }
        if (config.generateCss.enable) {
            var css_Files = '';
            var cssFiles = glob.sync(rls(upath.join(rls(config.generateCss.src_path), '**', '*.scss')), {
                ignore : [
                    "**/_*.scss"
                ]
            });
            cssFiles.forEach(function (file) {
                var fileContent = fs.readFileSync(file, 'utf8');
                var regex = new RegExp("\\$output_path:\\s*['\"]?(.+?)['\"]?\\s*;", 'gmiu');
                var matches = regex.exec(fileContent);
                var destination = false;
                if (matches !== null) {
                    destination = rls(matches[1]);
                }
                if (destination) {
                    css_Files += rls(destination) + os.EOL +
                        rls(destination + '.map') + os.EOL;
                }
            });
            gitIgnoreRules += css_Files;
        }
        if (config.generateJs.enable) {
            var jsFiles = glob.sync(rls(upath.join(rls(config.generateJs.src_path), '**', '*.js')), {
                ignore : [
                    '**/_*.js'
                ]
            });
            jsFiles.forEach(function (file) {
                delete require.cache[require.resolve(upath.relative(__dirname, file))];
                var fileConfig = require(upath.relative(__dirname, file));
                fileConfig = JSON.parse(JSON.stringify(fileConfig));
                gitIgnoreRules += rls(fileConfig.output_path) + '.map' + os.EOL +
                    rls(fileConfig.output_path) + os.EOL;
            });
        }
        if (fs.pathExistsSync(source)) {
            var fileContent = fs.readFileSync(source, 'utf8');
            var finalContent = '### /!\\ Do not edit this file. See : gulp-includes/.gitignore /!\\ ###' + os.EOL +
                '### Rules generated by `gulp gitignore` ###' + os.EOL +
                gitIgnoreRules +
                rls(config.generateFavicon.output) + os.EOL +
                '### Rules from gulp-includes/.gitignore ###' + os.EOL + fileContent + os.EOL +
                '### /!\\ Do not edit this file. See : gulp-includes/.gitignore /!\\ ###';
            try {
                fs.outputFileSync('./.gitignore', finalContent);
            } catch (err) {
                success = false;
                notifier.notify({
                    title : 'Possible permission Error',
                    message : 'Cannot update or create file. Please check permissions.',
                    icon : './gulp-includes/core/images/fidesio-logo.png'
                });
                console.log(os.EOL);
                log.error(err);
                console.log(os.EOL);
            }
        } else {
            success = false;
            notifier.notify({
                title : 'Gitignore compilation Error',
                message : 'A file is missing.',
                icon : './gulp-includes/core/images/fidesio-logo.png'
            });
            console.log(os.EOL);
            log.error('ERROR! File ' + source + ' does not exist.');
            console.log(os.EOL);
        }
        return success;
    }
};